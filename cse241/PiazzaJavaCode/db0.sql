SELECT CUSTOMER_TRANSACTION.*, PRODUCT.PRODUCT_NAME, PRODUCT."SIZE", BRAND.BRAND_NAME, STORE.ADDRESS
FROM CUSTOMER_TRANSACTION, INV_PRODUCT, PRODUCT, PRODUCT_BRAND, BRAND, CUST_PURCHASE
LEFT OUTER JOIN STORE_INV ON STORE_INV.INV_ID = CUST_PURCHASE.INV_ID
LEFT OUTER JOIN STORE ON STORE.STORE_ID = STORE_INV.STORE_ID
WHERE CUSTOMER_TRANSACTION.TRANS_ID = CUST_PURCHASE.TRANS_ID
AND INV_PRODUCT.INV_ID = CUST_PURCHASE.INV_ID
AND PRODUCT.PRODUCT_ID = INV_PRODUCT.PRODUCT_ID
AND PRODUCT.PRODUCT_ID = PRODUCT_BRAND.PRODUCT_ID
AND BRAND.BRAND_ID = PRODUCT_BRAND.BRAND_ID
AND CUST_PURCHASE.CUSTOMER_ID = ?;



/*
CREATE OR REPLACE PROCEDURE
    inventory_sale (
    cid IN CUSTOMER.CUSTOMER_ID%TYPE, 
    invid IN INVENTORY.INV_ID%TYPE, 
    inamount IN CUSTOMER_TRANSACTION.AMOUNT%TYPE, 
    inisonline IN CUSTOMER_TRANSACTION.IS_ONLINE%TYPE, 
    inpaytype IN CUSTOMER_TRANSACTION.PAY_TYPE%TYPE, 
    incardnum IN CREDIT.CARD_NUM%TYPE, 
    incvv IN CREDIT.CVV%TYPE, 
    inexpdate IN CREDIT.EXP_DATE%TYPE, 
    inchecknum IN "CHECK".CHECK_NUM%TYPE, 
    OUTPUT OUT VARCHAR)
    IS
    var number(38);
BEGIN
    OUTPUT := '';
    SELECT TOTAL
    INTO var
    FROM INVENTORY
    WHERE INV_ID = invid;
    IF var < inamount
    THEN
        OUTPUT := 'Not enough inventory';
        RETURN;
    END IF;
    
    
END;
*/


--CALL CREATE_PRODUCT('ps4', '', 'console', 'sony');
--EXECUTE CREATE_PRODUCT('chicken nuggets','large','chicken','tyson');
--INSERT INTO BRAND (BRAND_NAME) VALUES('stanley');
--INSERT INTO PRODUCT_TYPE (TYPE_ID, PRODUCT_ID) VALUES((SELECT TYPE_ID FROM TYPE WHERE TYPE_NAME = 'pants'), (SELECT PRODUCT_ID FROM PRODUCT WHERE PRODUCT_NAME = 'bread pants'));
--CLEAR SCREEN;
--EXECUTE INVENTORY_BUY('66', '22', '', 'Y', '89.33', '89');
--DELETE FROM PRODUCT WHERE PRODUCT_ID >= 1;
--UPDATE PRODUCT_TYPE SET TYPE_ID = 15 WHERE TYPE_ID = 7;
--SELECT (NVL(FOOD.TYPE_ID, 0) + NVL(NOT_FOOD.TYPE_ID, 0)) as TYPE_ID FROM FOOD FULL OUTER JOIN NOT_FOOD ON not_food.type_id = FOOD.TYPE_ID WHERE (NVL(FOOD.SUPER_ID, 0) + NVL(NOT_FOOD.SUPER_ID, 0)) = 1;
--SELECT * FROM TYPE;
--SELECT * FROM PRODUCT_TYPE, PRODUCT, PRODUCT_BRAND, BRAND, INV_PRODUCT, INVENTORY LEFT OUTER JOIN STORE_INV ON STORE_INV.INV_ID = INVENTORY.INV_ID WHERE PRODUCT_TYPE.PRODUCT_ID = PRODUCT.PRODUCT_ID AND PRODUCT_BRAND.PRODUCT_ID = PRODUCT.PRODUCT_ID AND INV_PRODUCT.PRODUCT_ID = PRODUCT.PRODUCT_ID AND PRODUCT_BRAND.PRODUCT_ID = PRODUCT.PRODUCT_ID AND PRODUCT_BRAND.BRAND_ID = BRAND.BRAND_ID AND INV_PRODUCT.INV_ID = INVENTORY.INV_ID AND STORE_INV.STORE_ID = ? AND PRODUCT_TYPE.TYPE_ID = ?;
/*
SELECT TYPE.*, BRAND.*, PRODUCT.*, INVENTORY.*, (NVL(FOOD.SUPER_ID, 0) + NVL(NOT_FOOD.SUPER_ID, 0)) AS MAIN_SUPER_ID FROM (TYPE LEFT OUTER JOIN FOOD ON FOOD.TYPE_ID = TYPE.TYPE_ID LEFT OUTER JOIN NOT_FOOD ON NOT_FOOD.TYPE_ID = TYPE.TYPE_ID), PRODUCT_TYPE, PRODUCT, PRODUCT_BRAND, BRAND, INV_PRODUCT, INVENTORY
        LEFT OUTER JOIN STORE_INV ON STORE_INV.INV_ID = INVENTORY.INV_ID 
        WHERE PRODUCT_TYPE.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND PRODUCT_BRAND.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND INV_PRODUCT.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND PRODUCT_BRAND.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND PRODUCT_BRAND.BRAND_ID = BRAND.BRAND_ID 
        AND TYPE.TYPE_ID = PRODUCT_TYPE.TYPE_ID 
        AND INV_PRODUCT.INV_ID = INVENTORY.INV_ID 
        AND STORE_INV.STORE_ID is null;
        --START WITH PRODUCT_TYPE.TYPE_ID = 2
        --CONNECT BY PRIOR TYPE.TYPE_ID = (NVL(FOOD.SUPER_ID, 0) + NVL(NOT_FOOD.SUPER_ID, 0));
        
        SELECT TYPE.* FROM TYPE LEFT OUTER JOIN FOOD ON FOOD.TYPE_ID = TYPE.TYPE_ID
        LEFT OUTER JOIN NOT_FOOD ON NOT_FOOD.TYPE_ID = TYPE.TYPE_ID
        START WITH TYPE.TYPE_ID = 3
        CONNECT BY PRIOR TYPE.TYPE_ID = (NVL(FOOD.SUPER_ID, 0) + NVL(NOT_FOOD.SUPER_ID, 0));*/

/*SELECT *
    FROM INV_PRODUCT, INVENTORY
    LEFT OUTER JOIN STORE_INV
    ON INVENTORY.INV_ID = STORE_INV.INV_ID
    WHERE (STORE_ID IS NULL OR STORE_ID = '')
    AND INVENTORY.INV_ID = INV_PRODUCT.INV_ID;*/
--SELECT * FROM BRAND;
--SELECT * FROM PRODUCT;
/*DECLARE
    var number(38);
BEGIN
    INSERT INTO INVENTORY (TOTAL, CURR_PRICE)
    VALUES (0, 27.67)
    RETURNING INV_ID INTO var;
    INSERT INTO INV_PRODUCT (INV_ID, PRODUCT_ID)
    VALUES (var, 32);
END;
*//*
SELECT PRODUCT.PRODUCT_ID,
PRODUCT.PRODUCT_NAME,
PRODUCT."SIZE", 
BRAND.BRAND_NAME,
INVENTORY.TOTAL,
INVENTORY.CURR_PRICE,
TYPE.TYPE_NAME 
FROM (TYPE LEFT OUTER JOIN FOOD ON FOOD.TYPE_ID = TYPE.TYPE_ID LEFT OUTER JOIN NOT_FOOD ON NOT_FOOD.TYPE_ID = TYPE.TYPE_ID), PRODUCT_TYPE, PRODUCT, PRODUCT_BRAND, BRAND, INV_PRODUCT, INVENTORY
        LEFT OUTER JOIN STORE_INV ON STORE_INV.INV_ID = INVENTORY.INV_ID 
        WHERE PRODUCT_TYPE.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND PRODUCT_BRAND.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND INV_PRODUCT.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND PRODUCT_BRAND.PRODUCT_ID = PRODUCT.PRODUCT_ID 
        AND PRODUCT_BRAND.BRAND_ID = BRAND.BRAND_ID 
        AND TYPE.TYPE_ID = PRODUCT_TYPE.TYPE_ID 
        AND INV_PRODUCT.INV_ID = INVENTORY.INV_ID 
        AND STORE_INV.STORE_ID = 198
        AND PRODUCT_TYPE.TYPE_ID IN (
        SELECT TYPE.TYPE_ID FROM TYPE LEFT OUTER JOIN FOOD ON FOOD.TYPE_ID = TYPE.TYPE_ID
        LEFT OUTER JOIN NOT_FOOD ON NOT_FOOD.TYPE_ID = TYPE.TYPE_ID
        START WITH TYPE.TYPE_ID = 2
        CONNECT BY PRIOR TYPE.TYPE_ID = (NVL(FOOD.SUPER_ID, 0) + NVL(NOT_FOOD.SUPER_ID, 0)));
SELECT * FROM FOOD;
*/
--SELECT * FROM PRODUCT_TYPE;
--SELECT * FROM PRODUCT_BRAND;
--SELECT * FROM VENDOR_TRANSACTION;
--SELECT * FROM INVENTORY;
--SELECT * FROM INV_PURCHASE;
--SELECT * FROM INV_PRODUCT;
--SELECT * FROM VENDOR;
--SELECT * FROM VENDOR_PRODUCT;
--SELECT * FROM STORE;
--SELECT STORE_ID,ADDRESS FROM STORE WHERE ZIPCODE = 18014;
--SELECT * FROM STORE_INV;
--SELECT ZIPCODE, CUSTOMER_ID FROM CUSTOMER;
--SELECT * FROM CUSTOMER_TRANSACTION;
--SELECT * FROM CUST_PURCHASE;
--SELECT * FROM CREDIT;
--SELECT * FROM "CHECK";
--SELECT * FROM FREQUENT_SHOPPER;
--SELECT * FROM ONLINE_SHOPPER;

