/*
CREATE OR REPLACE PROCEDURE
    inventory_sale (
    cid IN CUSTOMER.CUSTOMER_ID%TYPE, 
    invid IN INVENTORY.INV_ID%TYPE, 
    inamount IN CUSTOMER_TRANSACTION.AMOUNT%TYPE, 
    inisonline IN CUSTOMER_TRANSACTION.IS_ONLINE%TYPE, 
    inpaytype IN CUSTOMER_TRANSACTION.PAY_TYPE%TYPE, 
    incardnum IN CREDIT.CARD_NUM%TYPE, 
    incvv IN CREDIT.CVV%TYPE, 
    inexpdate IN CREDIT.EXP_DATE%TYPE, 
    inchecknum IN "CHECK".CHECK_NUM%TYPE, 
    OUTPUT OUT VARCHAR)
    IS
    var number(38);
BEGIN
    OUTPUT := '';
    SELECT TOTAL
    INTO var
    FROM INVENTORY
    WHERE INV_ID = invid;
    IF var < inamount
    THEN
        OUTPUT := 'Not enough inventory';
        RETURN;
    END IF;
    
    
END;
*/


--CALL CREATE_PRODUCT('ps4', '', 'console', 'sony');
--EXECUTE CREATE_PRODUCT('chicken nuggets','large','chicken','tyson');
--INSERT INTO BRAND (BRAND_NAME) VALUES('stanley');
--INSERT INTO PRODUCT_TYPE (TYPE_ID, PRODUCT_ID) VALUES((SELECT TYPE_ID FROM TYPE WHERE TYPE_NAME = 'pants'), (SELECT PRODUCT_ID FROM PRODUCT WHERE PRODUCT_NAME = 'bread pants'));
CLEAR SCREEN;
--EXECUTE INVENTORY_BUY('66', '22', '', 'Y', '89.33', '89');
--DELETE FROM PRODUCT WHERE PRODUCT_ID >= 1;
--UPDATE PRODUCT_TYPE SET TYPE_ID = 15 WHERE TYPE_ID = 7;
--SELECT * FROM TYPE;
--SELECT * FROM BRAND;
--SELECT * FROM PRODUCT;
--SELECT * FROM PRODUCT_TYPE;
--SELECT * FROM PRODUCT_BRAND;
--SELECT * FROM VENDOR_TRANSACTION;
SELECT * FROM INVENTORY;
--SELECT * FROM INV_PURCHASE;
--SELECT * FROM INV_PRODUCT;
--SELECT * FROM VENDOR;
--SELECT * FROM VENDOR_PRODUCT;
--SELECT * FROM STORE;
--SELECT * FROM STORE_INV;
--SELECT * FROM CUSTOMER;
SELECT * FROM CUSTOMER_TRANSACTION;
SELECT * FROM CUST_PURCHASE;
SELECT * FROM CREDIT;
SELECT * FROM "CHECK";
--SELECT * FROM FREQUENT_SHOPPER;
--SELECT * FROM ONLINE_SHOPPER;

/*
DROP TABLE "CHECK" CASCADE CONSTRAINTS;
DROP TABLE "CREDIT" CASCADE CONSTRAINTS;
DROP TABLE "CUSTOMER_TRANSACTION" CASCADE CONSTRAINTS;
DROP TABLE "CUST_PURCHASE" CASCADE CONSTRAINTS;
DROP TABLE "INVENTORY" CASCADE CONSTRAINTS;
DROP TABLE "INV_PRODUCT" CASCADE CONSTRAINTS;
DROP TABLE "INV_PURCHASE" CASCADE CONSTRAINTS;
DROP TABLE "STORE" CASCADE CONSTRAINTS;
DROP TABLE "STORE_INV" CASCADE CONSTRAINTS;
DROP TABLE "VENDOR" CASCADE CONSTRAINTS;
DROP TABLE "VENDOR_PRODUCT" CASCADE CONSTRAINTS;
DROP TABLE "VENDOR_TRANSACTION" CASCADE CONSTRAINTS;


CREATE TABLE vendor
(VENDOR_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
ADDRESS VARCHAR(50) NOT NULL,
ZIPCODE NUMBER(5) NOT NULL,
PRIMARY KEY (VENDOR_ID));

CREATE TABLE store
(STORE_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
ADDRESS VARCHAR(50) NOT NULL,
ZIPCODE NUMBER(5) NOT NULL,
PRIMARY KEY (STORE_ID));

CREATE TABLE inventory
(INV_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
TOTAL NUMBER(30) CHECK (TOTAL >= 0),
CURR_PRICE NUMBER(7,2) CHECK (CURR_PRICE >= 0),
PRIMARY KEY (INV_ID));

CREATE TABLE vendor_transaction
(TRANS_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
PRICE NUMBER(7,2) CHECK (PRICE >= 0),
AMOUNT NUMBER(30) CHECK (AMOUNT > 0),
PURCH_DATE TIMESTAMP,
PRIMARY KEY (TRANS_ID));

CREATE TABLE customer_transaction
(TRANS_ID NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
PRICE NUMBER(7,2) CHECK (PRICE >= 0),
AMOUNT NUMBER(30) CHECK (AMOUNT > 0),
SALE_DATE TIMESTAMP,
IS_ONLINE CHAR(1) CHECK (IS_ONLINE = 'Y' OR IS_ONLINE = 'N'),
PAY_TYPE VARCHAR(10) NOT NULL,
PRIMARY KEY (TRANS_ID));

CREATE TABLE credit
(TRANS_ID NUMBER,
CARD_NUM NUMBER(20) NOT NULL,
CVV NUMBER(4) NOT NULL,
EXP_DATE VARCHAR(5) NOT NULL,
PRIMARY KEY (TRANS_ID),
FOREIGN KEY (TRANS_ID) references customer_transaction
on delete cascade);

CREATE TABLE "CHECK"
(TRANS_ID NUMBER,
CHECK_NUM VARCHAR(25) NOT NULL,
PRIMARY KEY (TRANS_ID),
FOREIGN KEY (TRANS_ID) references customer_transaction
on delete cascade);


CREATE TABLE inv_product
(INV_ID NUMBER,
PRODUCT_ID NUMBER,
PRIMARY KEY (INV_ID),
FOREIGN KEY (INV_ID) REFERENCES INVENTORY 
ON DELETE CASCADE,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT 
ON DELETE CASCADE);

CREATE TABLE vendor_product
(VENDOR_ID NUMBER,
PRODUCT_ID NUMBER,
VENDOR_PRICE NUMBER(7,2) CHECK (VENDOR_PRICE >= 0),
PRIMARY KEY (VENDOR_ID, PRODUCT_ID),
FOREIGN KEY (VENDOR_ID) REFERENCES VENDOR 
ON DELETE CASCADE,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT 
ON DELETE CASCADE);

CREATE TABLE store_inv
(INV_ID NUMBER,
STORE_ID NUMBER,
PRIMARY KEY (INV_ID),
FOREIGN KEY (INV_ID) REFERENCES INVENTORY 
ON DELETE CASCADE,
FOREIGN KEY (STORE_ID) REFERENCES STORE 
ON DELETE CASCADE);

CREATE TABLE inv_purchase
(INV_ID NUMBER,
VENDOR_ID NUMBER,
PRODUCT_ID NUMBER,
TRANS_ID NUMBER,
PRIMARY KEY (TRANS_ID),
FOREIGN KEY (TRANS_ID) REFERENCES VENDOR_TRANSACTION 
ON DELETE CASCADE,
FOREIGN KEY (INV_ID) REFERENCES INVENTORY
ON DELETE SET NULL,
FOREIGN KEY (VENDOR_ID) REFERENCES VENDOR
ON DELETE SET NULL,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT
ON DELETE SET NULL);

CREATE TABLE cust_purchase
(INV_ID NUMBER,
CUSTOMER_ID VARCHAR(20),
TRANS_ID NUMBER,
PRIMARY KEY (TRANS_ID),
FOREIGN KEY (TRANS_ID) REFERENCES CUSTOMER_TRANSACTION 
ON DELETE CASCADE,
FOREIGN KEY (INV_ID) REFERENCES INVENTORY
ON DELETE SET NULL,
FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER
ON DELETE SET NULL);
